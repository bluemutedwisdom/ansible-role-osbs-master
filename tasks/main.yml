---
### openshift service ###

- name: open/close openshift port in the firewall
  firewalld:
    port: "{{ osbs_openshift_port }}/tcp"
    state: "{{ osbs_master_expose_port | ternary('enabled', 'disabled') }}"
    permanent: true
    immediate: true
  when: osbs_manage_firewalld

- name: allow node access in the firewall
  template: src=openshift_nodes.xml.j2 dest=/etc/firewalld/zones/openshift_nodes.xml
  when: osbs_manage_firewalld
  notify: restart firewalld

- name: apply modifications to /etc/sysconfig/origin
  copy: src=sysconfig-origin-master dest=/etc/sysconfig/origin-master
  notify: restart openshift-master

- name: check for configuration generated by RPM
  stat: path=/etc/origin/.config_managed
  register: rpm_config_managed

- name: remove configuration generated by RPM
  file: path=/etc/origin/{{ item }} state=absent
  with_items:
  - master
  - node
  - .config_managed
  when: rpm_config_managed.stat.exists

- name: generate basic openshift configuration and certificates
  command: >
    openshift start master
    --write-config=/etc/origin/master
    --master=https://{{ ansible_fqdn }}:8443
  args:
    chdir: "{{ osbs_openshift_home }}"
    creates: /etc/origin/master/master-config.yaml

- name: configure openshift master
  template: src=master-config.yaml.j2 dest=/etc/origin/master/master-config.yaml
  notify: restart openshift-master

- name: generate initial configuration for nodes
  command: >
    oadm create-node-config
    --node-dir=/etc/origin/node-{{ item }}
    --node={{ item }}
    --hostnames={{ item }}
    --node-client-certificate-authority=/etc/origin/master/ca.crt
    --signer-cert=/etc/origin/master/ca.crt
    --signer-key=/etc/origin/master/ca.key
    --signer-serial=/etc/origin/master/ca.serial.txt
    --certificate-authority=/etc/origin/master/ca.crt
    --master=https://{{ ansible_fqdn }}:8443
  args:
    chdir: "{{ osbs_openshift_home }}"
    creates: /etc/origin/node-{{ item }}/node-config.yaml
  with_items: "{{ osbs_nodes }}"

- name: configure openshift nodes
  template: src=node-config.yaml.j2 dest=/etc/origin/node-{{ item }}/node-config.yaml
  with_items: "{{ osbs_nodes }}"

- name: tar up node configuration
  command: tar cJf node-{{ item }}.tar.xz node-{{ item }}
  args:
    chdir: /etc/origin
  with_items: "{{ osbs_nodes }}"

- name: copy node configs to the ansible host
  fetch:
    src: /etc/origin/node-{{ item }}.tar.xz
    dest: "{{ osbs_node_config_dir }}/"
    flat: yes
    fail_on_missing: yes
  with_items: "{{ osbs_nodes }}"

- name: install openssl
  action: "{{ ansible_pkg_mgr }} name=openssl state=installed"

- name: generate cert for authenticating proxy - self-signed certificate
  command: >
    openssl req -new -nodes -x509
    -subj "/C=CZ/ST=SelfSigned/L=SelfSigned/O=IT/CN={{ ansible_fqdn }}"
    -days 3650
    -keyout {{ osbs_proxy_key_file }}
    -out {{ osbs_proxy_cert_file }}
    -extensions v3_ca
  args:
    creates: "{{ osbs_proxy_cert_file }}"
  notify:
  - convert privkey to rsa
  - concatenate cert and key

# We need to have openshift restarted in order to configure authentication.
- name: run handlers in order to set up openshift auth
  meta: flush_handlers

- name: ensure openshift is running
  service: name=origin-master state=started enabled=yes

- name: wait for openshift to start accepting connections
  wait_for: port={{ osbs_openshift_port }} timeout=30

- name: copy service accounts
  template: src=openshift-serviceaccount.yml.j2 dest={{ osbs_openshift_home }}/serviceaccount-{{ item }}.yml
  with_items: "{{ osbs_service_accounts }}"
  tags:
  - oc

- name: import service accounts
  command: >
    oc create
    --namespace={{ osbs_namespace }}
    --filename={{ osbs_openshift_home }}/serviceaccount-{{ item }}.yml
  register: service_account_import
  failed_when: service_account_import.rc != 0 and ('already exists' not in service_account_import.stderr)
  with_items: "{{ osbs_service_accounts }}"
  tags:
  - oc

- name: copy role bindings
  template: src=openshift-rolebinding.yml.j2 dest={{ osbs_openshift_home }}/rolebinding-{{ item.name }}.yml
  with_items:
  - name: osbs-readonly
    role: view
    users: "{{ osbs_readonly_users }}"
    groups: "{{ osbs_readonly_groups }}"
  - name: osbs-readwrite
    role: edit
    users: "{{ osbs_readwrite_users }}"
    groups: "{{ osbs_readwrite_groups }}"
  - name: osbs-admin
    role: admin
    users: "{{ osbs_admin_users }}"
    groups: "{{ osbs_admin_groups }}"
  tags:
  - oc

- name: import the role bindings
  command: >
    oc replace
    --namespace={{ osbs_namespace }}
    --force=true
    --filename={{ osbs_openshift_home }}/rolebinding-{{ item }}.yml
  environment: osbs_environment
  with_items:
  - osbs-readonly
  - osbs-readwrite
  - osbs-admin
  tags:
  - oc

- name: copy resource quotas
  template: src=openshift-resourcequota.yml.j2 dest={{ osbs_openshift_home }}/resourcequota.yml
  when: osbs_master_max_pods is defined and osbs_master_max_pods >= 0
  tags:
  - oc
  - resourcequotas

- name: import resource quotas
  command: >
    oc replace
    --namespace={{ osbs_namespace }}
    --force=true
    --filename={{ osbs_openshift_home }}/resourcequota.yml
  environment: osbs_environment
  when: osbs_master_max_pods is defined and osbs_master_max_pods >= 0
  tags:
  - oc
  - resourcequotas

- name: delete resource quotas
  command: >
    oc delete
    --namespace={{ osbs_namespace }}
    --ignore-not-found=true
    resourcequota concurrentbuilds
  environment: osbs_environment
  when: osbs_master_max_pods is not defined or osbs_master_max_pods < 0
  tags:
  - oc
  - resourcequotas

# Useful when using "oc" to inspect openshift state.
- name: add KUBECONFIG to .bashrc
  lineinfile:
    dest: "{{ ansible_env.HOME }}/.bashrc"
    regexp: "export KUBECONFIG="
    line: "export KUBECONFIG={{ osbs_environment.KUBECONFIG }}"

- include: export.yml
  when: osbs_export_dir is defined
